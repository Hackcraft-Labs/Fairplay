import hashlib
import os
import json
import argparse
import time

__ascii__ = '''

███╗   ███╗ █████╗ ██╗     ██╗    ██╗ █████╗ ██████╗ ███████╗██████╗ ██╗  ██╗ █████╗ ███████╗██╗  ██╗
████╗ ████║██╔══██╗██║     ██║    ██║██╔══██╗██╔══██╗██╔════╝╚════██╗██║  ██║██╔══██╗██╔════╝██║  ██║
██╔████╔██║███████║██║     ██║ █╗ ██║███████║██████╔╝█████╗   █████╔╝███████║███████║███████╗███████║
██║╚██╔╝██║██╔══██║██║     ██║███╗██║██╔══██║██╔══██╗██╔══╝  ██╔═══╝ ██╔══██║██╔══██║╚════██║██╔══██║
██║ ╚═╝ ██║██║  ██║███████╗╚███╔███╔╝██║  ██║██║  ██║███████╗███████╗██║  ██║██║  ██║███████║██║  ██║
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ (v{version})
                                                                                                  
'''
__version__ = "1.0"

# Colors class
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    RESET = '\033[0m'
    
    # Text styles
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# By default, poll every thirty minutes
DEFAULT_POLL_TIME = 30

parser = argparse.ArgumentParser(prog = 'Malware-2-Hash',description='Script to automate the hashing and creation of malware IOCs!', epilog='Text at the bottom of help')

parser.add_argument("-f", "--filepath", help="Malware file to hash")
parser.add_argument("-n", "--name", help="Malware name")
args = parser.parse_args()

if args.filepath == None:
	print("Argument -f (--filepath) is required!")
	os._exit(0)


#Find file
if not(os.path.isfile(args.filepath)):
	print("Invalid filepath! please try again")
	os._exit(0)

file = args.filepath

# The size of each read from the file
BLOCK_SIZE = 65536

#Start timer
startTime = time.time()

# Create the hash objects
md5_obj = hashlib.md5()
sha1_obj = hashlib.sha1()
sha256_obj = hashlib.sha256()
sha512_obj = hashlib.sha512()

with open(file, 'rb') as f:
	fileblock = f.read(BLOCK_SIZE)
	while len(fileblock) > 0:
		md5_obj.update(fileblock)
		sha1_obj.update(fileblock)
		sha256_obj.update(fileblock)
		sha512_obj.update(fileblock)
		fileblock = f.read(BLOCK_SIZE)
f.close()


if args.name == None:
	getFileName = os.path.basename(file)
	#print(getFileName)
	filename = getFileName.split(".")
	name = filename[0]
	#print(name)
	
	# Get Absolute Path of fileName
	fullFilePath = os.path.abspath(file)
else:
	# Get Absolute Path of fileName
	fullFilePath = os.path.abspath(file)
	
	# Set as fileName args given name
	name = args.name

	


print (__ascii__.format(version=__version__))
print(f"[+] Full File Path: {Colors.BOLD}{Colors.CYAN}{fullFilePath}{Colors.RESET}\n")
print(f"[+] Hashes: \n"
      f" MD5: {Colors.BOLD}{Colors.RED}{md5_obj.hexdigest()}{Colors.RESET}\n"
      f" SHA1: {Colors.BOLD}{Colors.YELLOW}{sha1_obj.hexdigest()}{Colors.RESET}\n"
      f" SHA256: {Colors.BOLD}{Colors.GREEN}{sha256_obj.hexdigest()}{Colors.RESET}\n"
      f" SHA512: {Colors.BOLD}{Colors.MAGENTA}{sha512_obj.hexdigest()}{Colors.RESET}\n")

ioc = {
	"name" : name,
	"file_hash" : sha256_obj.hexdigest(),
	"poll_time" : DEFAULT_POLL_TIME,
	"MD5" : md5_obj.hexdigest(),
	"SHA1" : sha1_obj.hexdigest(),
	"SHA256" : sha256_obj.hexdigest(),
	"SHA512" : sha512_obj.hexdigest()
}

json_object = json.dumps(ioc, indent=4)

with open("ioc/" + name + ".json", "w") as outfile:
	outfile.write(json_object)
outfile.close()

#End timer
endTime = time.time()

# Determibe execution time
executionTime = (endTime - startTime) * 1000

print(f"[+] IOC file saved: {Colors.BOLD}{Colors.CYAN}ioc/{name}.json{Colors.RESET}\n")
print(f"[+] Completed in: {Colors.BOLD}{Colors.WHITE}{executionTime:.2f}{Colors.RESET} ms\n")
