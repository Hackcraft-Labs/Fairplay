import re
from collectors import Collector
import malwarebazaar.api
import json
import requests
import traceback


class MalwareBazaar(Collector):
	def __init__(self):
		super().__init__()

	def malware_sandbox_parser(self, response):

		vendor_list = ["ANY.RUN", "CAPE", "CERT-PL_MWDB", "vxCube", "DocGuard", "FileScan-IO", "InQuest",
					   "Intezer", "ReversingLabs", "Spamhaus_HBL", "Triage", "UnpacMe", "VMRay", "YOROI_YOMI"]
		detection_keywords = ["verdict", "detection", "malware_family", "threat_name", "detections"]
		scanner = {}

		for vendor in response["data"][0]["vendor_intel"]:
			sandbox_response=response["data"][0]["vendor_intel"][vendor]
			if type(sandbox_response) is list:
				sandbox_response=sandbox_response[0]

			for detection_keyword in detection_keywords:
				try:
					if sandbox_response[detection_keyword] != None and sandbox_response[detection_keyword] != []:
						scanner[vendor] = sandbox_response[detection_keyword]
				except KeyError as e_tmp:
					pass


		return scanner


	def execute(self, ioc):
		client = malwarebazaar.api.Bazaar(self.get_key("api_key"))
		response = None
		try:
			response = client.query_hash(ioc["file_hash"])

			if response["query_status"]=="hash_not_found":
				return

			extra_info="First seen on {n}. Posted By {name}. ".format(n=response["data"][0]["first_seen"],name=response["data"][0]["reporter"])
			sandbox_results=self.malware_sandbox_parser(response)
			try:
				self.extra(extra_info)
				for sandbox in sandbox_results:
					extra_info_formatter="Sandbox {sandbox_name} found {verdict_sandbox}.".format(sandbox_name=sandbox,verdict_sandbox=sandbox_results[sandbox])
					self.extra(extra_info_formatter)
			except Exception as e:
				exit(print(f"[MalwareBazaar] {e}\n"))
			self.report(ioc)
		except Exception as exc:
			if response:
				if response["query_status"]=="hash_not_found":
					pass
			else:
				print(f"[{self.Name}] {exc}\n")
